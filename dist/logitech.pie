/* logitech.pie
GlovePIE script generated by descent-glovepie
Apache License 2.0
Project Home: https://github.com/deftflux/descent-glovepie
*/



// Initial var states:
if (not var.Initialized) {
    var.ButtonStateActionDown := 0;
    var.ButtonStateActionRight := 0;
    var.ButtonStateActionLeft := 0;
    var.ButtonStateActionUp := 0;
    var.ButtonStateDPadUp := 0;
    var.ButtonStateDPadDown := 0;
    var.ButtonStateDPadLeft := 0;
    var.ButtonStateDPadRight := 0;
    var.ButtonStateLeftLowerShoulder := 0;
    var.ButtonStateLeftUpperShoulder := 0;
    var.ButtonStateStartLeft := 0;
    var.ButtonStateStartRight := 0;
    var.ShiftState := 1;
    var.ShiftDefault := false;
    var.Initialized := true;
}


// Axis mappings:


// When shift buttons pressed:

// StartLeft
if (Joystick1.Button9 and var.ButtonStateStartLeft == 0) {
    if (var.ShiftState == 1) {
        var.ShiftState := 2;
        var.ShiftDefault := true;
    }
    var.ButtonStateStartLeft := var.ShiftState;
}

// StartRight
if (Joystick1.Button10 and var.ButtonStateStartRight == 0) {
    if (var.ShiftState == 1) {
        var.ShiftState := 3;
        var.ShiftDefault := true;
    }
    var.ButtonStateStartRight := var.ShiftState;
}


// When non-shift buttons pressed:

// ActionDown
if (Joystick1.Button2 and var.ButtonStateActionDown == 0) {
    var.ButtonStateActionDown := var.ShiftState;
}

// ActionRight
if (Joystick1.Button3 and var.ButtonStateActionRight == 0) {
    var.ButtonStateActionRight := var.ShiftState;
}

// ActionLeft
if (Joystick1.Button1 and var.ButtonStateActionLeft == 0) {
    var.ButtonStateActionLeft := var.ShiftState;
}

// ActionUp
if (Joystick1.Button4 and var.ButtonStateActionUp == 0) {
    var.ButtonStateActionUp := var.ShiftState;
}

// DPadUp
if ((Joystick1.y <= -0.5) and var.ButtonStateDPadUp == 0) {
    var.ButtonStateDPadUp := var.ShiftState;
}

// DPadDown
if ((Joystick1.y >= 0.5) and var.ButtonStateDPadDown == 0) {
    var.ButtonStateDPadDown := var.ShiftState;
}

// DPadLeft
if ((Joystick1.x <= -0.5) and var.ButtonStateDPadLeft == 0) {
    var.ButtonStateDPadLeft := var.ShiftState;
}

// DPadRight
if ((Joystick1.x >= 0.5) and var.ButtonStateDPadRight == 0) {
    var.ButtonStateDPadRight := var.ShiftState;
}

// LeftLowerShoulder
if (Joystick1.Button6 and var.ButtonStateLeftLowerShoulder == 0) {
    var.ButtonStateLeftLowerShoulder := var.ShiftState;
}

// LeftUpperShoulder
if (Joystick1.Button5 and var.ButtonStateLeftUpperShoulder == 0) {
    var.ButtonStateLeftUpperShoulder := var.ShiftState;
}


// Normal button mappings:
Keyboard.Enter := InSet(var.ButtonStateActionDown, 1, 2, 3);
PPJoy1.Digital1 := InSet(var.ButtonStateActionRight, 1, 2, 3);
Keyboard.Space := InSet(var.ButtonStateActionLeft, 1, 2, 3);
PPJoy.Digital2 := InSet(var.ButtonStateActionUp, 1, 2, 3);
Keyboard.Up := InSet(var.ButtonStateDPadUp, 1, 2, 3);
Keyboard.Down := InSet(var.ButtonStateDPadDown, 1, 2, 3);
Keyboard.Left := InSet(var.ButtonStateDPadLeft, 1, 2, 3);
Keyboard.Right := InSet(var.ButtonStateDPadRight, 1, 2, 3);


// Throttle mapping:
PPJoy1.Analog0 := ((-1 * InSet(var.ButtonStateLeftLowerShoulder, 1, 2, 3)) + (1 * InSet(var.ButtonStateLeftUpperShoulder, 1, 2, 3) * (not InSet(var.ButtonStateLeftLowerShoulder, 1, 2, 3))));
PPJoy1.Digital0 := (InSet(var.ButtonStateLeftLowerShoulder, 1, 2, 3) and InSet(var.ButtonStateLeftUpperShoulder, 1, 2, 3));


// Shifted button mappings:

// StartLeft+StartRight
if (var.ButtonStateStartRight == 2) {
    var.ButtonStateStartRight := -1;
    var.ShiftDefault := false;
    Keyboard.Zero := true;
    Keyboard.Zero := false;
}

// StartRight+StartLeft
if (var.ButtonStateStartLeft == 3) {
    var.ButtonStateStartLeft := -1;
    var.ShiftDefault := false;
    Keyboard.Five := true;
    Keyboard.Five := false;
}


// When non-shift buttons released:
if ((not Joystick1.Button2) and var.ButtonStateActionDown != 0) var.ButtonStateActionDown := 0;
if ((not Joystick1.Button3) and var.ButtonStateActionRight != 0) var.ButtonStateActionRight := 0;
if ((not Joystick1.Button1) and var.ButtonStateActionLeft != 0) var.ButtonStateActionLeft := 0;
if ((not Joystick1.Button4) and var.ButtonStateActionUp != 0) var.ButtonStateActionUp := 0;
if ((not (Joystick1.y <= -0.5)) and var.ButtonStateDPadUp != 0) var.ButtonStateDPadUp := 0;
if ((not (Joystick1.y >= 0.5)) and var.ButtonStateDPadDown != 0) var.ButtonStateDPadDown := 0;
if ((not (Joystick1.x <= -0.5)) and var.ButtonStateDPadLeft != 0) var.ButtonStateDPadLeft := 0;
if ((not (Joystick1.x >= 0.5)) and var.ButtonStateDPadRight != 0) var.ButtonStateDPadRight := 0;
if ((not Joystick1.Button6) and var.ButtonStateLeftLowerShoulder != 0) var.ButtonStateLeftLowerShoulder := 0;
if ((not Joystick1.Button5) and var.ButtonStateLeftUpperShoulder != 0) var.ButtonStateLeftUpperShoulder := 0;


// When shift buttons released:

// StartLeft
if ((not Joystick1.Button9) and var.ButtonStateStartLeft != 0) {
    if (var.ShiftState == 2) {
        var.ShiftState := 1;
    }
    var.ButtonStateStartLeft := 0;
}

// StartRight
if ((not Joystick1.Button10) and var.ButtonStateStartRight != 0) {
    if (var.ShiftState == 3) {
        var.ShiftState := 1;
        if (var.ShiftDefault) {
            Keyboard.Escape := true;
            Keyboard.Escape := false;
        }
    }
    var.ButtonStateStartRight := 0;
}


// Debug text:
if (var.PreviousShiftState != var.ShiftState) {
    if (var.ShiftState == 1) debug := "No Shift";
    if (var.ShiftState == 2) debug := "Shift: StartLeft";
    if (var.ShiftState == 3) debug := "Shift: StartRight";
    var.PreviousShiftState := var.ShiftState;
}