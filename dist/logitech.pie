/* logitech.pie
GlovePIE script generated by descent-glovepie
Apache License 2.0
Project Home: https://github.com/deftflux/descent-glovepie

Script for using a Logitech PC gamepad or similar generic gamepad.  Descent
supports using these controllers directly, but using this script enables
navigating game menus using the gamepad and using button combos for selecting
weapons and performing various game functions.

Since Descent supports these gamepads directly, and GlovePIE has trouble
reading both thumb sticks, the thumb stick axes will be used directly.  Since
there is no need to use a virtual joystick for any axis, this script maps
everything to the keyboard.  That way, there is no need to install PPJoy.

This script assumes the following button layout and will refer to the buttons
by their location rather than button number:  (If your layout is different, 
edit the "alias" section of logitech.json accordingly and regenerate.)

Button  Name                Location
-----------------------------------------------
1       ActionLeft          Left action button
2       ActionDown          Lower action button
3       ActionRight         Right action button
4       ActionUp            Upper action button
5       LeftUpperShoulder   Upper left shoulder button
6       RightUpperShoulder  Upper right shoulder button
7       LeftLowerShoulder   Lower left shoulder button
8       RightLowerShoulder  Lower right shoulder button
9       StartLeft           Left button in the middle of the pad
                            (Same location as "Select" in other pads)
10      StartRight          Right button in the middle of the pad
                            (Same location as "Start" in other pads)
11      LeftThumb           Pressing in the left thumb stick
12      RightThumb          Pressing in the right thumb stick


KEYBOARD MAPPINGS

Gamepad Button       Key             Suggested Assignment
---------------------------------------------------------
D-Pad Up             Up arrow        Fire flare
D-Pad Down           Down arrow      Rear view
D-Pad Left           Left arrow      Cycle primary
D-Pad Right          Right arrow     Cycle secondary
StartRight           Escape key      (Abort game / back out of menu)
StartRight+ActionUp  Tab key         Automap
ActionDown           Enter key       Drop bomb
ActionLeft           Space bar       Toggle bomb (Menu check boxes)
ActionRight          NUMPAD 6        Convert energy to shield (D2)
ActionUp             NUMPAD 8        Headlight (D2)
LeftUpperShoulder    NUMPAD 7        Reverse
LeftLowerShoulder    NUMPAD 1        Forward
Both left shoudlers  ' (apostrophe)  Afterburner (D2)
RightUpperShoulder   NUMPAD 9        Fire primary    
RightLowerShoulder   NUMPAD 3        Fire secondary
LeftThumb            NUMPAD 0        Bank left
RightThumb           NUMPAD .        Bank right


JOYSTICK BUTTON MAPPINGS

There are no mappings to virtual joystick buttons.


JOYSTICK AXIS MAPPINGS

This script doesn't map anything to virtual joystick axes.  Descent supports
this gamepad, so assign the axes directly.


KEYBOARD MACROS

Button Combo    Keystroke   Game Function
-------------------------------------------------
StartRight+Down         1           Laser / Super Laser
StartRight+Left         2           Vulcan / Guass
StartRight+Up           3           Spread / Helix
StartRight+Right        4           Plasma / Phoenix
StartRight+StartLeft    5           Fusion / Omega
StartLeft+ActionDown    6           Concussion / Flash
StartLeft+ActionRight   7           Homing / Guided
StartLeft+ActionUp      8           Prox bomb / Smart bomb
StartLeft+ActionLeft    9           Smart / Mercury
StartLeft+StartRight    0           Mega / Earthshaker
StartRight+ActionDown   Alt-F1      Fast Save (rebirth)
StartRight+ActionRight  Alt-F3      Load Game
StartRight+ActionLeft   F2          Options
StartLeft+Left          Shift-F1    Cycle left camera (D2)
StartLeft+Right         Shift-F2    Cycle right camera (D2)

*/



// Initial var states:
if (not var.Initialized) {
    var.ButtonStateActionDown := 0;
    var.ButtonStateActionRight := 0;
    var.ButtonStateActionLeft := 0;
    var.ButtonStateActionUp := 0;
    var.ButtonStateDPadUp := 0;
    var.ButtonStateDPadDown := 0;
    var.ButtonStateDPadLeft := 0;
    var.ButtonStateDPadRight := 0;
    var.ButtonStateRightUpperShoulder := 0;
    var.ButtonStateRightLowerShoulder := 0;
    var.ButtonStateLeftThumb := 0;
    var.ButtonStateRightThumb := 0;
    var.ButtonStateLeftLowerShoulder := 0;
    var.ButtonStateLeftUpperShoulder := 0;
    var.ButtonStateStartLeft := 0;
    var.ButtonStateStartRight := 0;
    var.ShiftState := 1;
    var.ShiftDefault := false;
    var.Initialized := true;
}


// When shift buttons pressed:

// StartLeft
if (Joystick1.Button9 and var.ButtonStateStartLeft == 0) {
    if (var.ShiftState == 1) {
        var.ShiftState := 2;
        var.ShiftDefault := true;
    }
    var.ButtonStateStartLeft := var.ShiftState;
}

// StartRight
if (Joystick1.Button10 and var.ButtonStateStartRight == 0) {
    if (var.ShiftState == 1) {
        var.ShiftState := 3;
        var.ShiftDefault := true;
    }
    var.ButtonStateStartRight := var.ShiftState;
}


// When non-shift buttons pressed:

// ActionDown
if (Joystick1.Button2 and var.ButtonStateActionDown == 0) {
    var.ButtonStateActionDown := var.ShiftState;
}

// ActionRight
if (Joystick1.Button3 and var.ButtonStateActionRight == 0) {
    var.ButtonStateActionRight := var.ShiftState;
}

// ActionLeft
if (Joystick1.Button1 and var.ButtonStateActionLeft == 0) {
    var.ButtonStateActionLeft := var.ShiftState;
}

// ActionUp
if (Joystick1.Button4 and var.ButtonStateActionUp == 0) {
    var.ButtonStateActionUp := var.ShiftState;
}

// DPadUp
if (Joystick1.Pov1Up and var.ButtonStateDPadUp == 0) {
    var.ButtonStateDPadUp := var.ShiftState;
}

// DPadDown
if (Joystick1.Pov1Down and var.ButtonStateDPadDown == 0) {
    var.ButtonStateDPadDown := var.ShiftState;
}

// DPadLeft
if (Joystick1.Pov1Left and var.ButtonStateDPadLeft == 0) {
    var.ButtonStateDPadLeft := var.ShiftState;
}

// DPadRight
if (Joystick1.Pov1Right and var.ButtonStateDPadRight == 0) {
    var.ButtonStateDPadRight := var.ShiftState;
}

// RightUpperShoulder
if (Joystick1.Button6 and var.ButtonStateRightUpperShoulder == 0) {
    var.ButtonStateRightUpperShoulder := var.ShiftState;
}

// RightLowerShoulder
if (Joystick1.Button8 and var.ButtonStateRightLowerShoulder == 0) {
    var.ButtonStateRightLowerShoulder := var.ShiftState;
}

// LeftThumb
if (Joystick1.Button11 and var.ButtonStateLeftThumb == 0) {
    var.ButtonStateLeftThumb := var.ShiftState;
}

// RightThumb
if (Joystick1.Button12 and var.ButtonStateRightThumb == 0) {
    var.ButtonStateRightThumb := var.ShiftState;
}

// LeftLowerShoulder
if (Joystick1.Button7 and var.ButtonStateLeftLowerShoulder == 0) {
    var.ButtonStateLeftLowerShoulder := var.ShiftState;
}

// LeftUpperShoulder
if (Joystick1.Button5 and var.ButtonStateLeftUpperShoulder == 0) {
    var.ButtonStateLeftUpperShoulder := var.ShiftState;
}


// Normal button mappings:
Keyboard.Enter := (var.ButtonStateActionDown == 1);
Keyboard.NUMPAD6 := (var.ButtonStateActionRight == 1);
Keyboard.Space := (var.ButtonStateActionLeft == 1);
Keyboard.NUMPAD8 := (var.ButtonStateActionUp == 1);
Keyboard.Up := InSet(var.ButtonStateDPadUp, 1, 2);
Keyboard.Down := InSet(var.ButtonStateDPadDown, 1, 2);
Keyboard.Left := (var.ButtonStateDPadLeft == 1);
Keyboard.Right := (var.ButtonStateDPadRight == 1);
Keyboard.NUMPAD9 := InSet(var.ButtonStateRightUpperShoulder, 1, 2, 3);
Keyboard.NUMPAD3 := InSet(var.ButtonStateRightLowerShoulder, 1, 2, 3);
Keyboard.NUMPAD0 := InSet(var.ButtonStateLeftThumb, 1, 2, 3);
Keyboard.NumpadDot := InSet(var.ButtonStateRightThumb, 1, 2, 3);


// Throttle mapping:
Keyboard.Apostrophe := (InSet(var.ButtonStateLeftLowerShoulder, 1, 2, 3) and InSet(var.ButtonStateLeftUpperShoulder, 1, 2, 3));
Keyboard.NUMPAD7 := InSet(var.ButtonStateLeftLowerShoulder, 1, 2, 3);
Keyboard.NUMPAD1 := (InSet(var.ButtonStateLeftUpperShoulder, 1, 2, 3) and (not InSet(var.ButtonStateLeftLowerShoulder, 1, 2, 3)));


// Shifted button mappings:

// StartLeft+ActionDown
if (var.ButtonStateActionDown == 2) {
    var.ButtonStateActionDown := -1;
    var.ShiftDefault := false;
    Keyboard.Six := true;
    Keyboard.Six := false;
}

// StartLeft+ActionRight
if (var.ButtonStateActionRight == 2) {
    var.ButtonStateActionRight := -1;
    var.ShiftDefault := false;
    Keyboard.Seven := true;
    Keyboard.Seven := false;
}

// StartLeft+ActionLeft
if (var.ButtonStateActionLeft == 2) {
    var.ButtonStateActionLeft := -1;
    var.ShiftDefault := false;
    Keyboard.Nine := true;
    Keyboard.Nine := false;
}

// StartLeft+ActionUp
if (var.ButtonStateActionUp == 2) {
    var.ButtonStateActionUp := -1;
    var.ShiftDefault := false;
    Keyboard.Eight := true;
    Keyboard.Eight := false;
}

// StartLeft+DPadLeft
if (var.ButtonStateDPadLeft == 2) {
    var.ButtonStateDPadLeft := -1;
    var.ShiftDefault := false;
    Keyboard.Shift := true;
    Keyboard.F1 := true;
    Keyboard.F1 := false;
    Keyboard.Shift := false;
}

// StartLeft+DPadRight
if (var.ButtonStateDPadRight == 2) {
    var.ButtonStateDPadRight := -1;
    var.ShiftDefault := false;
    Keyboard.Shift := true;
    Keyboard.F2 := true;
    Keyboard.F2 := false;
    Keyboard.Shift := false;
}

// StartLeft+StartRight
if (var.ButtonStateStartRight == 2) {
    var.ButtonStateStartRight := -1;
    var.ShiftDefault := false;
    Keyboard.Zero := true;
    Keyboard.Zero := false;
}

// StartRight+ActionDown
if (var.ButtonStateActionDown == 3) {
    var.ButtonStateActionDown := -1;
    var.ShiftDefault := false;
    Keyboard.Alt := true;
    Keyboard.F1 := true;
    Keyboard.F1 := false;
    Keyboard.Alt := false;
}

// StartRight+ActionRight
if (var.ButtonStateActionRight == 3) {
    var.ButtonStateActionRight := -1;
    var.ShiftDefault := false;
    Keyboard.Alt := true;
    Keyboard.F3 := true;
    Keyboard.F3 := false;
    Keyboard.Alt := false;
}

// StartRight+ActionLeft
if (var.ButtonStateActionLeft == 3) {
    var.ButtonStateActionLeft := -1;
    var.ShiftDefault := false;
    Keyboard.F2 := true;
    Keyboard.F2 := false;
}

// StartRight+ActionUp
if (var.ButtonStateActionUp == 3) {
    var.ButtonStateActionUp := -1;
    var.ShiftDefault := false;
    Keyboard.Tab := true;
    Keyboard.Tab := false;
}

// StartRight+DPadUp
if (var.ButtonStateDPadUp == 3) {
    var.ButtonStateDPadUp := -1;
    var.ShiftDefault := false;
    Keyboard.Three := true;
    Keyboard.Three := false;
}

// StartRight+DPadDown
if (var.ButtonStateDPadDown == 3) {
    var.ButtonStateDPadDown := -1;
    var.ShiftDefault := false;
    Keyboard.One := true;
    Keyboard.One := false;
}

// StartRight+DPadLeft
if (var.ButtonStateDPadLeft == 3) {
    var.ButtonStateDPadLeft := -1;
    var.ShiftDefault := false;
    Keyboard.Two := true;
    Keyboard.Two := false;
}

// StartRight+DPadRight
if (var.ButtonStateDPadRight == 3) {
    var.ButtonStateDPadRight := -1;
    var.ShiftDefault := false;
    Keyboard.Four := true;
    Keyboard.Four := false;
}

// StartRight+StartLeft
if (var.ButtonStateStartLeft == 3) {
    var.ButtonStateStartLeft := -1;
    var.ShiftDefault := false;
    Keyboard.Five := true;
    Keyboard.Five := false;
}


// When non-shift buttons released:
if ((not Joystick1.Button2) and var.ButtonStateActionDown != 0) var.ButtonStateActionDown := 0;
if ((not Joystick1.Button3) and var.ButtonStateActionRight != 0) var.ButtonStateActionRight := 0;
if ((not Joystick1.Button1) and var.ButtonStateActionLeft != 0) var.ButtonStateActionLeft := 0;
if ((not Joystick1.Button4) and var.ButtonStateActionUp != 0) var.ButtonStateActionUp := 0;
if ((not Joystick1.Pov1Up) and var.ButtonStateDPadUp != 0) var.ButtonStateDPadUp := 0;
if ((not Joystick1.Pov1Down) and var.ButtonStateDPadDown != 0) var.ButtonStateDPadDown := 0;
if ((not Joystick1.Pov1Left) and var.ButtonStateDPadLeft != 0) var.ButtonStateDPadLeft := 0;
if ((not Joystick1.Pov1Right) and var.ButtonStateDPadRight != 0) var.ButtonStateDPadRight := 0;
if ((not Joystick1.Button6) and var.ButtonStateRightUpperShoulder != 0) var.ButtonStateRightUpperShoulder := 0;
if ((not Joystick1.Button8) and var.ButtonStateRightLowerShoulder != 0) var.ButtonStateRightLowerShoulder := 0;
if ((not Joystick1.Button11) and var.ButtonStateLeftThumb != 0) var.ButtonStateLeftThumb := 0;
if ((not Joystick1.Button12) and var.ButtonStateRightThumb != 0) var.ButtonStateRightThumb := 0;
if ((not Joystick1.Button7) and var.ButtonStateLeftLowerShoulder != 0) var.ButtonStateLeftLowerShoulder := 0;
if ((not Joystick1.Button5) and var.ButtonStateLeftUpperShoulder != 0) var.ButtonStateLeftUpperShoulder := 0;


// When shift buttons released:

// StartLeft
if ((not Joystick1.Button9) and var.ButtonStateStartLeft != 0) {
    if (var.ShiftState == 2) {
        var.ShiftState := 1;
    }
    var.ButtonStateStartLeft := 0;
}

// StartRight
if ((not Joystick1.Button10) and var.ButtonStateStartRight != 0) {
    if (var.ShiftState == 3) {
        var.ShiftState := 1;
        if (var.ShiftDefault) {
            Keyboard.Escape := true;
            Keyboard.Escape := false;
        }
    }
    var.ButtonStateStartRight := 0;
}


// Debug text:
if (var.PreviousShiftState != var.ShiftState) {
    if (var.ShiftState == 1) debug := "No Shift";
    if (var.ShiftState == 2) debug := "Shift: StartLeft";
    if (var.ShiftState == 3) debug := "Shift: StartRight";
    var.PreviousShiftState := var.ShiftState;
}