/* ps3.pie
GlovePIE script generated by descent-glovepie
Apache License 2.0
Project Home: https://github.com/deftflux/descent-glovepie


KEYBOARD MAPPINGS

PS3 Button   Key          Suggested Assignment
----------------------------------------------
D-Pad Up     Up arrow     Fire flare
D-Pad Down   Down arrow   Rear view
D-Pad Left   Left arrow   Cycle primary
D-Pad Right  Right arrow  Cycle secondary
PS+Triangle  Tab key      Automap
Cross        Enter key    Drop bomb
Square       Space bar    Toggle bomb (Menu check boxes)
PS           Escape key   (Abort game / back out of menu)


JOYSTICK BUTTON MAPPINGS

PS3 Button  Joystick  Suggested Assignment
-----------------------------------------
R1          Button 1  Fire primary    
R2          Button 2  Fire secondary
L3          Button 3  Bank left
R3          Button 4  Bank right
Circle      Button 5  Convert energy to shield (D2)
Triangle    Button 6  Headlight (D2)
L1+L2       Button 7  Afterburner (D2)


JOYSTICK AXIS MAPPINGS

PS3 Axis       Joystick  Suggested Assignment
--------------------------------------------
Left Stick X   Axis 1    Slide L/R
Left Stick Y   Axis 2    Slide U/D
Right Stick X  Axis 3    Turn L/R
Right Stick Y  Axis 4    Pitch U/D
L1 / L2        Axis 5    Throttle


KEYBOARD MACROS

PS3 Combo        Keystroke   Game Function
--------------------------------------------------
Start+Down       1           Laser / Super Laser
Start+Left       2           Vulcan / Guass
Start+Up         3           Spread / Helix
Start+Right      4           Plasma / Phoenix
Start+Select     5           Fusion / Omega
Select+Cross     6           Concussion / Flash
Select+Circle    7           Homing / Guided
Select+Triangle  8           Prox bomb / Smart bomb
Select+Square    9           Smart / Mercury
Select+Start     0           Mega / Earthshaker
PS+Cross         Alt-F1      Fast Save (rebirth)
PS+Circle        Alt-F3      Load Game
PS+Square        F2          Options
PS+Left          Shift-F1    Cycle left camera (D2)
PS+Right         Shift-F2    Cycle right camera (D2)

Right now, there is room to map PS+ the following buttons:
L1, L2, R1, R2, L3, R3, Up, Down, Start, Select

*/



// Initial var states:
if (not var.Initialized) {
    var.ButtonStateCross := 0;
    var.ButtonStateCircle := 0;
    var.ButtonStateSquare := 0;
    var.ButtonStateTriangle := 0;
    var.ButtonStateUp := 0;
    var.ButtonStateDown := 0;
    var.ButtonStateLeft := 0;
    var.ButtonStateRight := 0;
    var.ButtonStateR1 := 0;
    var.ButtonStateR2 := 0;
    var.ButtonStateL3 := 0;
    var.ButtonStateR3 := 0;
    var.ButtonStateL2 := 0;
    var.ButtonStateL1 := 0;
    var.ButtonStatePS := 0;
    var.ButtonStateSelect := 0;
    var.ButtonStateStart := 0;
    var.ShiftState := 1;
    var.ShiftDefault := false;
    var.Initialized := true;
}


// Axis mappings:
PPJoy1.Analog0 := (Sixaxis1.LeftStickX / (1 - Math.max(0, Math.abs(Sixaxis1.LeftStickY) - 0.7)));
PPJoy1.Analog1 := -(Sixaxis1.LeftStickY / (1 - Math.max(0, Math.abs(Sixaxis1.LeftStickX) - 0.7)));
PPJoy1.Analog2 := (Sixaxis1.RightStickX / (1 - Math.max(0, Math.abs(Sixaxis1.RightStickY) - 0.7)));
PPJoy1.Analog3 := (Sixaxis1.RightStickY / (1 - Math.max(0, Math.abs(Sixaxis1.RightStickX) - 0.7)));


// When shift buttons pressed:

// PS
if (Sixaxis1.PS and var.ButtonStatePS == 0) {
    if (var.ShiftState == 1) {
        var.ShiftState := 2;
        var.ShiftDefault := true;
    }
    var.ButtonStatePS := var.ShiftState;
}

// Select
if (Sixaxis1.Select and var.ButtonStateSelect == 0) {
    if (var.ShiftState == 1) {
        var.ShiftState := 3;
        var.ShiftDefault := true;
    }
    var.ButtonStateSelect := var.ShiftState;
}

// Start
if (Sixaxis1.Start and var.ButtonStateStart == 0) {
    if (var.ShiftState == 1) {
        var.ShiftState := 4;
        var.ShiftDefault := true;
    }
    var.ButtonStateStart := var.ShiftState;
}


// When non-shift buttons pressed:

// Cross
if (Sixaxis1.Cross and var.ButtonStateCross == 0) {
    var.ButtonStateCross := var.ShiftState;
}

// Circle
if (Sixaxis1.Circle and var.ButtonStateCircle == 0) {
    var.ButtonStateCircle := var.ShiftState;
}

// Square
if (Sixaxis1.Square and var.ButtonStateSquare == 0) {
    var.ButtonStateSquare := var.ShiftState;
}

// Triangle
if (Sixaxis1.Triangle and var.ButtonStateTriangle == 0) {
    var.ButtonStateTriangle := var.ShiftState;
}

// Up
if (Sixaxis1.Up and var.ButtonStateUp == 0) {
    var.ButtonStateUp := var.ShiftState;
}

// Down
if (Sixaxis1.Down and var.ButtonStateDown == 0) {
    var.ButtonStateDown := var.ShiftState;
}

// Left
if (Sixaxis1.Left and var.ButtonStateLeft == 0) {
    var.ButtonStateLeft := var.ShiftState;
}

// Right
if (Sixaxis1.Right and var.ButtonStateRight == 0) {
    var.ButtonStateRight := var.ShiftState;
}

// R1
if (Sixaxis1.R1 and var.ButtonStateR1 == 0) {
    var.ButtonStateR1 := var.ShiftState;
}

// R2
if (Sixaxis1.R2 and var.ButtonStateR2 == 0) {
    var.ButtonStateR2 := var.ShiftState;
}

// L3
if (Sixaxis1.L3 and var.ButtonStateL3 == 0) {
    var.ButtonStateL3 := var.ShiftState;
}

// R3
if (Sixaxis1.R3 and var.ButtonStateR3 == 0) {
    var.ButtonStateR3 := var.ShiftState;
}

// L2
if (Sixaxis1.L2 and var.ButtonStateL2 == 0) {
    var.ButtonStateL2 := var.ShiftState;
}

// L1
if (Sixaxis1.L1 and var.ButtonStateL1 == 0) {
    var.ButtonStateL1 := var.ShiftState;
}


// Normal button mappings:
Keyboard.Enter := InSet(var.ButtonStateCross, 1, 4);
PPJoy1.Digital4 := InSet(var.ButtonStateCircle, 1, 4);
Keyboard.Space := InSet(var.ButtonStateSquare, 1, 4);
PPJoy.Digital5 := InSet(var.ButtonStateTriangle, 1, 4);
Keyboard.Up := InSet(var.ButtonStateUp, 1, 2, 3);
Keyboard.Down := InSet(var.ButtonStateDown, 1, 2, 3);
Keyboard.Left := InSet(var.ButtonStateLeft, 1, 3);
Keyboard.Right := InSet(var.ButtonStateRight, 1, 3);
PPJoy1.Digital0 := InSet(var.ButtonStateR1, 1, 2, 3, 4);
PPJoy1.Digital1 := InSet(var.ButtonStateR2, 1, 2, 3, 4);
PPJoy1.Digital2 := InSet(var.ButtonStateL3, 1, 2, 3, 4);
PPJoy1.Digital3 := InSet(var.ButtonStateR3, 1, 2, 3, 4);


// Throttle mapping:
PPJoy1.Analog4 := ((-Sixaxis1.L2Analog * InSet(var.ButtonStateL2, 1, 2, 3, 4)) + (Sixaxis1.L1Analog * InSet(var.ButtonStateL1, 1, 2, 3, 4) * (not InSet(var.ButtonStateL2, 1, 2, 3, 4))));
PPJoy1.Digital6 := (InSet(var.ButtonStateL2, 1, 2, 3, 4) and InSet(var.ButtonStateL1, 1, 2, 3, 4));


// Shifted button mappings:

// PS+Cross
if (var.ButtonStateCross == 2) {
    var.ButtonStateCross := -1;
    var.ShiftDefault := false;
    Keyboard.Alt := true;
    Keyboard.F1 := true;
    Keyboard.F1 := false;
    Keyboard.Alt := false;
}

// PS+Circle
if (var.ButtonStateCircle == 2) {
    var.ButtonStateCircle := -1;
    var.ShiftDefault := false;
    Keyboard.Alt := true;
    Keyboard.F3 := true;
    Keyboard.F3 := false;
    Keyboard.Alt := false;
}

// PS+Square
if (var.ButtonStateSquare == 2) {
    var.ButtonStateSquare := -1;
    var.ShiftDefault := false;
    Keyboard.F2 := true;
    Keyboard.F2 := false;
}

// PS+Triangle
if (var.ButtonStateTriangle == 2) {
    var.ButtonStateTriangle := -1;
    var.ShiftDefault := false;
    Keyboard.Tab := true;
    Keyboard.Tab := false;
}

// PS+Left
if (var.ButtonStateLeft == 2) {
    var.ButtonStateLeft := -1;
    var.ShiftDefault := false;
    Keyboard.Shift := true;
    Keyboard.F1 := true;
    Keyboard.F1 := false;
    Keyboard.Shift := false;
}

// PS+Right
if (var.ButtonStateRight == 2) {
    var.ButtonStateRight := -1;
    var.ShiftDefault := false;
    Keyboard.Shift := true;
    Keyboard.F2 := true;
    Keyboard.F2 := false;
    Keyboard.Shift := false;
}

// Select+Cross
if (var.ButtonStateCross == 3) {
    var.ButtonStateCross := -1;
    var.ShiftDefault := false;
    Keyboard.Six := true;
    Keyboard.Six := false;
}

// Select+Circle
if (var.ButtonStateCircle == 3) {
    var.ButtonStateCircle := -1;
    var.ShiftDefault := false;
    Keyboard.Seven := true;
    Keyboard.Seven := false;
}

// Select+Square
if (var.ButtonStateSquare == 3) {
    var.ButtonStateSquare := -1;
    var.ShiftDefault := false;
    Keyboard.Nine := true;
    Keyboard.Nine := false;
}

// Select+Triangle
if (var.ButtonStateTriangle == 3) {
    var.ButtonStateTriangle := -1;
    var.ShiftDefault := false;
    Keyboard.Eight := true;
    Keyboard.Eight := false;
}

// Select+Start
if (var.ButtonStateStart == 3) {
    var.ButtonStateStart := -1;
    var.ShiftDefault := false;
    Keyboard.Zero := true;
    Keyboard.Zero := false;
}

// Start+Up
if (var.ButtonStateUp == 4) {
    var.ButtonStateUp := -1;
    var.ShiftDefault := false;
    Keyboard.Three := true;
    Keyboard.Three := false;
}

// Start+Down
if (var.ButtonStateDown == 4) {
    var.ButtonStateDown := -1;
    var.ShiftDefault := false;
    Keyboard.One := true;
    Keyboard.One := false;
}

// Start+Left
if (var.ButtonStateLeft == 4) {
    var.ButtonStateLeft := -1;
    var.ShiftDefault := false;
    Keyboard.Two := true;
    Keyboard.Two := false;
}

// Start+Right
if (var.ButtonStateRight == 4) {
    var.ButtonStateRight := -1;
    var.ShiftDefault := false;
    Keyboard.Four := true;
    Keyboard.Four := false;
}

// Start+Select
if (var.ButtonStateSelect == 4) {
    var.ButtonStateSelect := -1;
    var.ShiftDefault := false;
    Keyboard.Five := true;
    Keyboard.Five := false;
}


// When non-shift buttons released:
if ((not Sixaxis1.Cross) and var.ButtonStateCross != 0) var.ButtonStateCross := 0;
if ((not Sixaxis1.Circle) and var.ButtonStateCircle != 0) var.ButtonStateCircle := 0;
if ((not Sixaxis1.Square) and var.ButtonStateSquare != 0) var.ButtonStateSquare := 0;
if ((not Sixaxis1.Triangle) and var.ButtonStateTriangle != 0) var.ButtonStateTriangle := 0;
if ((not Sixaxis1.Up) and var.ButtonStateUp != 0) var.ButtonStateUp := 0;
if ((not Sixaxis1.Down) and var.ButtonStateDown != 0) var.ButtonStateDown := 0;
if ((not Sixaxis1.Left) and var.ButtonStateLeft != 0) var.ButtonStateLeft := 0;
if ((not Sixaxis1.Right) and var.ButtonStateRight != 0) var.ButtonStateRight := 0;
if ((not Sixaxis1.R1) and var.ButtonStateR1 != 0) var.ButtonStateR1 := 0;
if ((not Sixaxis1.R2) and var.ButtonStateR2 != 0) var.ButtonStateR2 := 0;
if ((not Sixaxis1.L3) and var.ButtonStateL3 != 0) var.ButtonStateL3 := 0;
if ((not Sixaxis1.R3) and var.ButtonStateR3 != 0) var.ButtonStateR3 := 0;
if ((not Sixaxis1.L2) and var.ButtonStateL2 != 0) var.ButtonStateL2 := 0;
if ((not Sixaxis1.L1) and var.ButtonStateL1 != 0) var.ButtonStateL1 := 0;


// When shift buttons released:

// PS
if ((not Sixaxis1.PS) and var.ButtonStatePS != 0) {
    if (var.ShiftState == 2) {
        var.ShiftState := 1;
        if (var.ShiftDefault) {
            Keyboard.Escape := true;
            Keyboard.Escape := false;
        }
    }
    var.ButtonStatePS := 0;
}

// Select
if ((not Sixaxis1.Select) and var.ButtonStateSelect != 0) {
    if (var.ShiftState == 3) {
        var.ShiftState := 1;
    }
    var.ButtonStateSelect := 0;
}

// Start
if ((not Sixaxis1.Start) and var.ButtonStateStart != 0) {
    if (var.ShiftState == 4) {
        var.ShiftState := 1;
    }
    var.ButtonStateStart := 0;
}


// Debug text:
if (var.PreviousShiftState != var.ShiftState) {
    if (var.ShiftState == 1) debug := "No Shift";
    if (var.ShiftState == 2) debug := "Shift: PS";
    if (var.ShiftState == 3) debug := "Shift: Select";
    if (var.ShiftState == 4) debug := "Shift: Start";
    var.PreviousShiftState := var.ShiftState;
}