/* helper.pie
GlovePIE script generated by descent-glovepie
Apache License 2.0
Project Home: https://github.com/deftflux/descent-glovepie

The purpose of this script is to help you assign game functions to the virtual
joystick axes and buttons in Descent.  Some gamepads may already have some
support in Descent, so when you try to assign them in Descent, the game may 
pick up the real gamepad input instead of the virtual one.

When using this script, you can use keystrokes on the keyboard to activate the
various buttons and axes on the virtual joystick in order to assign them in the
game.  Here are the keystrokes to use:


Keystroke  Virtual Joystick
---------------------------
Ctrl-1     Button 1
Ctrl-2     Button 2
etc.

Alt-1      Axis 1
Alt-2      Axis 2
etc.

*/



// Initial var states:
if (not var.Initialized) {
    var.ButtonStateOne := 0;
    var.ButtonStateTwo := 0;
    var.ButtonStateThree := 0;
    var.ButtonStateFour := 0;
    var.ButtonStateFive := 0;
    var.ButtonStateSix := 0;
    var.ButtonStateSeven := 0;
    var.ButtonStateEight := 0;
    var.ButtonStateNine := 0;
    var.ButtonStateZero := 0;
    var.ButtonStateCtrl := 0;
    var.ButtonStateAlt := 0;
    var.ShiftState := 1;
    var.ShiftDefault := false;
    var.Initialized := true;
}


// Axis mappings:


// When shift buttons pressed:

// Ctrl
if (Keyboard.Ctrl and var.ButtonStateCtrl == 0) {
    if (var.ShiftState == 1) {
        var.ShiftState := 2;
        var.ShiftDefault := true;
    }
    var.ButtonStateCtrl := var.ShiftState;
}

// Alt
if (Keyboard.Alt and var.ButtonStateAlt == 0) {
    if (var.ShiftState == 1) {
        var.ShiftState := 3;
        var.ShiftDefault := true;
    }
    var.ButtonStateAlt := var.ShiftState;
}


// When non-shift buttons pressed:

// One
if (Keyboard.One and var.ButtonStateOne == 0) {
    var.ButtonStateOne := var.ShiftState;
}

// Two
if (Keyboard.Two and var.ButtonStateTwo == 0) {
    var.ButtonStateTwo := var.ShiftState;
}

// Three
if (Keyboard.Three and var.ButtonStateThree == 0) {
    var.ButtonStateThree := var.ShiftState;
}

// Four
if (Keyboard.Four and var.ButtonStateFour == 0) {
    var.ButtonStateFour := var.ShiftState;
}

// Five
if (Keyboard.Five and var.ButtonStateFive == 0) {
    var.ButtonStateFive := var.ShiftState;
}

// Six
if (Keyboard.Six and var.ButtonStateSix == 0) {
    var.ButtonStateSix := var.ShiftState;
}

// Seven
if (Keyboard.Seven and var.ButtonStateSeven == 0) {
    var.ButtonStateSeven := var.ShiftState;
}

// Eight
if (Keyboard.Eight and var.ButtonStateEight == 0) {
    var.ButtonStateEight := var.ShiftState;
}

// Nine
if (Keyboard.Nine and var.ButtonStateNine == 0) {
    var.ButtonStateNine := var.ShiftState;
}

// Zero
if (Keyboard.Zero and var.ButtonStateZero == 0) {
    var.ButtonStateZero := var.ShiftState;
}


// Normal button mappings:


// Shifted button mappings:

// Ctrl+One
PPJoy1.Digital0 := (var.ButtonStateOne == 2);
if (var.ShiftDefault and (var.ButtonStateOne == 2) {
    var.ShiftDefault := true;
}

// Ctrl+Two
PPJoy1.Digital1 := (var.ButtonStateTwo == 2);
if (var.ShiftDefault and (var.ButtonStateTwo == 2) {
    var.ShiftDefault := true;
}

// Ctrl+Three
PPJoy1.Digital2 := (var.ButtonStateThree == 2);
if (var.ShiftDefault and (var.ButtonStateThree == 2) {
    var.ShiftDefault := true;
}

// Ctrl+Four
PPJoy1.Digital3 := (var.ButtonStateFour == 2);
if (var.ShiftDefault and (var.ButtonStateFour == 2) {
    var.ShiftDefault := true;
}

// Ctrl+Five
PPJoy1.Digital4 := (var.ButtonStateFive == 2);
if (var.ShiftDefault and (var.ButtonStateFive == 2) {
    var.ShiftDefault := true;
}

// Ctrl+Six
PPJoy1.Digital5 := (var.ButtonStateSix == 2);
if (var.ShiftDefault and (var.ButtonStateSix == 2) {
    var.ShiftDefault := true;
}

// Ctrl+Seven
PPJoy1.Digital6 := (var.ButtonStateSeven == 2);
if (var.ShiftDefault and (var.ButtonStateSeven == 2) {
    var.ShiftDefault := true;
}

// Ctrl+Eight
PPJoy1.Digital7 := (var.ButtonStateEight == 2);
if (var.ShiftDefault and (var.ButtonStateEight == 2) {
    var.ShiftDefault := true;
}

// Ctrl+Nine
PPJoy1.Digital8 := (var.ButtonStateNine == 2);
if (var.ShiftDefault and (var.ButtonStateNine == 2) {
    var.ShiftDefault := true;
}

// Ctrl+Zero
PPJoy1.Digital9 := (var.ButtonStateZero == 2);
if (var.ShiftDefault and (var.ButtonStateZero == 2) {
    var.ShiftDefault := true;
}

// Alt+One
PPJoy1.Analog0 := (var.ButtonStateOne == 3);
if (var.ShiftDefault and (var.ButtonStateOne == 3) {
    var.ShiftDefault := true;
}

// Alt+Two
PPJoy1.Analog1 := (var.ButtonStateTwo == 3);
if (var.ShiftDefault and (var.ButtonStateTwo == 3) {
    var.ShiftDefault := true;
}

// Alt+Three
PPJoy1.Analog2 := (var.ButtonStateThree == 3);
if (var.ShiftDefault and (var.ButtonStateThree == 3) {
    var.ShiftDefault := true;
}

// Alt+Four
PPJoy1.Analog3 := (var.ButtonStateFour == 3);
if (var.ShiftDefault and (var.ButtonStateFour == 3) {
    var.ShiftDefault := true;
}

// Alt+Five
PPJoy1.Analog4 := (var.ButtonStateFive == 3);
if (var.ShiftDefault and (var.ButtonStateFive == 3) {
    var.ShiftDefault := true;
}

// Alt+Six
PPJoy1.Analog5 := (var.ButtonStateSix == 3);
if (var.ShiftDefault and (var.ButtonStateSix == 3) {
    var.ShiftDefault := true;
}

// Alt+Seven
PPJoy1.Analog6 := (var.ButtonStateSeven == 3);
if (var.ShiftDefault and (var.ButtonStateSeven == 3) {
    var.ShiftDefault := true;
}

// Alt+Eight
PPJoy1.Analog7 := (var.ButtonStateEight == 3);
if (var.ShiftDefault and (var.ButtonStateEight == 3) {
    var.ShiftDefault := true;
}

// Alt+Nine
PPJoy1.Analog8 := (var.ButtonStateNine == 3);
if (var.ShiftDefault and (var.ButtonStateNine == 3) {
    var.ShiftDefault := true;
}

// Alt+Zero
PPJoy1.Analog9 := (var.ButtonStateZero == 3);
if (var.ShiftDefault and (var.ButtonStateZero == 3) {
    var.ShiftDefault := true;
}


// When non-shift buttons released:
if ((not Keyboard.One) and var.ButtonStateOne != 0) var.ButtonStateOne := 0;
if ((not Keyboard.Two) and var.ButtonStateTwo != 0) var.ButtonStateTwo := 0;
if ((not Keyboard.Three) and var.ButtonStateThree != 0) var.ButtonStateThree := 0;
if ((not Keyboard.Four) and var.ButtonStateFour != 0) var.ButtonStateFour := 0;
if ((not Keyboard.Five) and var.ButtonStateFive != 0) var.ButtonStateFive := 0;
if ((not Keyboard.Six) and var.ButtonStateSix != 0) var.ButtonStateSix := 0;
if ((not Keyboard.Seven) and var.ButtonStateSeven != 0) var.ButtonStateSeven := 0;
if ((not Keyboard.Eight) and var.ButtonStateEight != 0) var.ButtonStateEight := 0;
if ((not Keyboard.Nine) and var.ButtonStateNine != 0) var.ButtonStateNine := 0;
if ((not Keyboard.Zero) and var.ButtonStateZero != 0) var.ButtonStateZero := 0;


// When shift buttons released:

// Ctrl
if ((not Keyboard.Ctrl) and var.ButtonStateCtrl != 0) {
    if (var.ShiftState == 2) {
        var.ShiftState := 1;
    }
    var.ButtonStateCtrl := 0;
}

// Alt
if ((not Keyboard.Alt) and var.ButtonStateAlt != 0) {
    if (var.ShiftState == 3) {
        var.ShiftState := 1;
    }
    var.ButtonStateAlt := 0;
}


// Debug text:
if (var.PreviousShiftState != var.ShiftState) {
    if (var.ShiftState == 1) debug := "No Shift";
    if (var.ShiftState == 2) debug := "Shift: Ctrl";
    if (var.ShiftState == 3) debug := "Shift: Alt";
    var.PreviousShiftState := var.ShiftState;
}