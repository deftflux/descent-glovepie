/* xbox-du-default.pie
GlovePIE script generated by descent-glovepie
Apache License 2.0
Project Home: https://github.com/deftflux/descent-glovepie

Script for using the XBOX controller and the default layout used by 
Descent: Underground to play Descent 1 & 2.

Descent has some support for the XBOX controller already, but by using this 
script, you can also use the analog shoulder buttons.  It also maps some 
buttons to keyboard keys for menu navigation and defines button combos for 
selecting weapons and performing various game functions.

Since Descent also supports the XBOX controller directly, you may have some
trouble performing the axis and button assignments within the game.  If so, use
the helper script (helper.pie) which will let you use the keyboard to activate
the various virtual joystick axis and button inputs.  Where applicable, you'll
see the corresponding helper keystroke to use with this script.


KEYBOARD MAPPINGS

XBOX Button  Key          Corresponding Assignment
--------------------------------------------------
D-Pad Up     Up arrow     Cycle primary
D-Pad Down   Down arrow   (No D:U assigment) Suggestion: Rear view
D-Pad Left   Left arrow   (No D:U assigment) Suggestion: Toggle bomb (D2)
D-Pad Right  Right arrow  Cycle secondary
A            Enter key    Slide down
X            Space bar    Drop bomb ("Deploy gadget" in D:U)
Start        Escape key   (Abort game / back out of menu)
Start+Y      Tab key      Automap


JOYSTICK BUTTON MAPPINGS

XBOX Button  Joystick  Helper  Corresponding Assignment
-------------------------------------------------------
RT           Button 1  Ctrl-1  Fire primary    
LT           Button 2  Ctrl-2  Fire secondary
LS           Button 3  Ctrl-3  Bank left
RS           Button 4  Ctrl-4  Bank right
Left Thumb   Button 5  Ctrl-5  (No D:U assignment) Suggestion: Afterburner (D2)
Right Thumb  Button 6  Ctrl-6  (No D:U assignment) 
B            Button 7  Ctrl-7  Convert energy to shield (D2) ("Use tool" in D:U)
Y            Button 8  Ctrl-8  Slide up


JOYSTICK AXIS MAPPINGS

XBOX Axis      Joystick  Helper  Corresponding Assignment
---------------------------------------------------------
Left Stick X   Axis 1    Alt-1   Slide L/R
Left Stick Y   Axis 2    Alt-2   Throttle
Right Stick X  Axis 3    Alt-3   Turn L/R
Right Stick Y  Axis 4    Alt-4   Pitch U/D


KEYBOARD MACROS

XBOX Combo    Keystroke   Game Function
-------------------------------------------------
Start+Down    1           Laser / Super Laser
Start+Left    2           Vulcan / Guass
Start+Up      3           Spread / Helix
Start+Right   4           Plasma / Phoenix
Start+Back    5           Fusion / Omega
Back+A        6           Concussion / Flash
Back+B        7           Homing / Guided
Back+Y        8           Prox bomb / Smart bomb
Back+X        9           Smart / Mercury
Back+Start    0           Mega / Earthshaker
Start+A       Alt-F1      Fast Save (rebirth)
Start+B       Alt-F3      Load Game
Start+X       F2          Options
Back+Left     Shift-F1    Cycle left camera (D2)
Back+Right    Shift-F2    Cycle right camera (D2)

*/



// Initial var states:
if (not var.Initialized) {
    var.ButtonStateA := 0;
    var.ButtonStateB := 0;
    var.ButtonStateX := 0;
    var.ButtonStateY := 0;
    var.ButtonStateUp := 0;
    var.ButtonStateDown := 0;
    var.ButtonStateLeft := 0;
    var.ButtonStateRight := 0;
    var.ButtonStateRightTrigger := 0;
    var.ButtonStateLeftTrigger := 0;
    var.ButtonStateLeftShoulder := 0;
    var.ButtonStateRightShoulder := 0;
    var.ButtonStateLeftThumb := 0;
    var.ButtonStateRightThumb := 0;
    var.ButtonStateBack := 0;
    var.ButtonStateStart := 0;
    var.ShiftState := 1;
    var.ShiftDefault := false;
    var.Initialized := true;
}


// Axis mappings:
PPJoy1.Analog0 := XInput1.Joy1X;
PPJoy1.Analog1 := -XInput1.Joy1Y;
PPJoy1.Analog2 := XInput1.Joy2X;
PPJoy1.Analog3 := XInput1.Joy2Y;


// When shift buttons pressed:

// Back
if (XInput1.Back and var.ButtonStateBack == 0) {
    if (var.ShiftState == 1) {
        var.ShiftState := 2;
        var.ShiftDefault := true;
    }
    var.ButtonStateBack := var.ShiftState;
}

// Start
if (XInput1.Start and var.ButtonStateStart == 0) {
    if (var.ShiftState == 1) {
        var.ShiftState := 3;
        var.ShiftDefault := true;
    }
    var.ButtonStateStart := var.ShiftState;
}


// When non-shift buttons pressed:

// A
if (XInput1.A and var.ButtonStateA == 0) {
    var.ButtonStateA := var.ShiftState;
}

// B
if (XInput1.B and var.ButtonStateB == 0) {
    var.ButtonStateB := var.ShiftState;
}

// X
if (XInput1.X and var.ButtonStateX == 0) {
    var.ButtonStateX := var.ShiftState;
}

// Y
if (XInput1.Y and var.ButtonStateY == 0) {
    var.ButtonStateY := var.ShiftState;
}

// Up
if (XInput1.Up and var.ButtonStateUp == 0) {
    var.ButtonStateUp := var.ShiftState;
}

// Down
if (XInput1.Down and var.ButtonStateDown == 0) {
    var.ButtonStateDown := var.ShiftState;
}

// Left
if (XInput1.Left and var.ButtonStateLeft == 0) {
    var.ButtonStateLeft := var.ShiftState;
}

// Right
if (XInput1.Right and var.ButtonStateRight == 0) {
    var.ButtonStateRight := var.ShiftState;
}

// RightTrigger
if (XInput1.RightTrigger and var.ButtonStateRightTrigger == 0) {
    var.ButtonStateRightTrigger := var.ShiftState;
}

// LeftTrigger
if (XInput1.LeftTrigger and var.ButtonStateLeftTrigger == 0) {
    var.ButtonStateLeftTrigger := var.ShiftState;
}

// LeftShoulder
if (XInput1.LeftShoulder and var.ButtonStateLeftShoulder == 0) {
    var.ButtonStateLeftShoulder := var.ShiftState;
}

// RightShoulder
if (XInput1.RightShoulder and var.ButtonStateRightShoulder == 0) {
    var.ButtonStateRightShoulder := var.ShiftState;
}

// LeftThumb
if (XInput1.LeftThumb and var.ButtonStateLeftThumb == 0) {
    var.ButtonStateLeftThumb := var.ShiftState;
}

// RightThumb
if (XInput1.RightThumb and var.ButtonStateRightThumb == 0) {
    var.ButtonStateRightThumb := var.ShiftState;
}


// Normal button mappings:
Keyboard.Enter := (var.ButtonStateA == 1);
PPJoy1.Digital6 := (var.ButtonStateB == 1);
Keyboard.Space := (var.ButtonStateX == 1);
PPJoy.Digital7 := (var.ButtonStateY == 1);
Keyboard.Up := InSet(var.ButtonStateUp, 1, 2);
Keyboard.Down := InSet(var.ButtonStateDown, 1, 2);
Keyboard.Left := (var.ButtonStateLeft == 1);
Keyboard.Right := (var.ButtonStateRight == 1);
PPJoy1.Digital0 := InSet(var.ButtonStateRightTrigger, 1, 2, 3);
PPJoy1.Digital1 := InSet(var.ButtonStateLeftTrigger, 1, 2, 3);
PPJoy1.Digital2 := InSet(var.ButtonStateLeftShoulder, 1, 2, 3);
PPJoy1.Digital3 := InSet(var.ButtonStateRightShoulder, 1, 2, 3);
PPJoy1.Digital4 := InSet(var.ButtonStateLeftThumb, 1, 2, 3);
PPJoy1.Digital5 := InSet(var.ButtonStateRightThumb, 1, 2, 3);


// Shifted button mappings:

// Back+A
if (var.ButtonStateA == 2) {
    var.ButtonStateA := -1;
    var.ShiftDefault := false;
    Keyboard.Six := true;
    Keyboard.Six := false;
}

// Back+B
if (var.ButtonStateB == 2) {
    var.ButtonStateB := -1;
    var.ShiftDefault := false;
    Keyboard.Seven := true;
    Keyboard.Seven := false;
}

// Back+X
if (var.ButtonStateX == 2) {
    var.ButtonStateX := -1;
    var.ShiftDefault := false;
    Keyboard.Nine := true;
    Keyboard.Nine := false;
}

// Back+Y
if (var.ButtonStateY == 2) {
    var.ButtonStateY := -1;
    var.ShiftDefault := false;
    Keyboard.Eight := true;
    Keyboard.Eight := false;
}

// Back+Left
if (var.ButtonStateLeft == 2) {
    var.ButtonStateLeft := -1;
    var.ShiftDefault := false;
    Keyboard.Shift := true;
    Keyboard.F1 := true;
    Keyboard.F1 := false;
    Keyboard.Shift := false;
}

// Back+Right
if (var.ButtonStateRight == 2) {
    var.ButtonStateRight := -1;
    var.ShiftDefault := false;
    Keyboard.Shift := true;
    Keyboard.F2 := true;
    Keyboard.F2 := false;
    Keyboard.Shift := false;
}

// Back+Start
if (var.ButtonStateStart == 2) {
    var.ButtonStateStart := -1;
    var.ShiftDefault := false;
    Keyboard.Zero := true;
    Keyboard.Zero := false;
}

// Start+A
if (var.ButtonStateA == 3) {
    var.ButtonStateA := -1;
    var.ShiftDefault := false;
    Keyboard.Alt := true;
    Keyboard.F1 := true;
    Keyboard.F1 := false;
    Keyboard.Alt := false;
}

// Start+B
if (var.ButtonStateB == 3) {
    var.ButtonStateB := -1;
    var.ShiftDefault := false;
    Keyboard.Alt := true;
    Keyboard.F3 := true;
    Keyboard.F3 := false;
    Keyboard.Alt := false;
}

// Start+X
if (var.ButtonStateX == 3) {
    var.ButtonStateX := -1;
    var.ShiftDefault := false;
    Keyboard.F2 := true;
    Keyboard.F2 := false;
}

// Start+Y
if (var.ButtonStateY == 3) {
    var.ButtonStateY := -1;
    var.ShiftDefault := false;
    Keyboard.Tab := true;
    Keyboard.Tab := false;
}

// Start+Up
if (var.ButtonStateUp == 3) {
    var.ButtonStateUp := -1;
    var.ShiftDefault := false;
    Keyboard.Three := true;
    Keyboard.Three := false;
}

// Start+Down
if (var.ButtonStateDown == 3) {
    var.ButtonStateDown := -1;
    var.ShiftDefault := false;
    Keyboard.One := true;
    Keyboard.One := false;
}

// Start+Left
if (var.ButtonStateLeft == 3) {
    var.ButtonStateLeft := -1;
    var.ShiftDefault := false;
    Keyboard.Two := true;
    Keyboard.Two := false;
}

// Start+Right
if (var.ButtonStateRight == 3) {
    var.ButtonStateRight := -1;
    var.ShiftDefault := false;
    Keyboard.Four := true;
    Keyboard.Four := false;
}

// Start+Back
if (var.ButtonStateBack == 3) {
    var.ButtonStateBack := -1;
    var.ShiftDefault := false;
    Keyboard.Five := true;
    Keyboard.Five := false;
}


// When non-shift buttons released:
if ((not XInput1.A) and var.ButtonStateA != 0) var.ButtonStateA := 0;
if ((not XInput1.B) and var.ButtonStateB != 0) var.ButtonStateB := 0;
if ((not XInput1.X) and var.ButtonStateX != 0) var.ButtonStateX := 0;
if ((not XInput1.Y) and var.ButtonStateY != 0) var.ButtonStateY := 0;
if ((not XInput1.Up) and var.ButtonStateUp != 0) var.ButtonStateUp := 0;
if ((not XInput1.Down) and var.ButtonStateDown != 0) var.ButtonStateDown := 0;
if ((not XInput1.Left) and var.ButtonStateLeft != 0) var.ButtonStateLeft := 0;
if ((not XInput1.Right) and var.ButtonStateRight != 0) var.ButtonStateRight := 0;
if ((not XInput1.RightTrigger) and var.ButtonStateRightTrigger != 0) var.ButtonStateRightTrigger := 0;
if ((not XInput1.LeftTrigger) and var.ButtonStateLeftTrigger != 0) var.ButtonStateLeftTrigger := 0;
if ((not XInput1.LeftShoulder) and var.ButtonStateLeftShoulder != 0) var.ButtonStateLeftShoulder := 0;
if ((not XInput1.RightShoulder) and var.ButtonStateRightShoulder != 0) var.ButtonStateRightShoulder := 0;
if ((not XInput1.LeftThumb) and var.ButtonStateLeftThumb != 0) var.ButtonStateLeftThumb := 0;
if ((not XInput1.RightThumb) and var.ButtonStateRightThumb != 0) var.ButtonStateRightThumb := 0;


// When shift buttons released:

// Back
if ((not XInput1.Back) and var.ButtonStateBack != 0) {
    if (var.ShiftState == 2) {
        var.ShiftState := 1;
    }
    var.ButtonStateBack := 0;
}

// Start
if ((not XInput1.Start) and var.ButtonStateStart != 0) {
    if (var.ShiftState == 3) {
        var.ShiftState := 1;
        if (var.ShiftDefault) {
            Keyboard.Escape := true;
            Keyboard.Escape := false;
        }
    }
    var.ButtonStateStart := 0;
}


// Debug text:
if (var.PreviousShiftState != var.ShiftState) {
    if (var.ShiftState == 1) debug := "No Shift";
    if (var.ShiftState == 2) debug := "Shift: Back";
    if (var.ShiftState == 3) debug := "Shift: Start";
    var.PreviousShiftState := var.ShiftState;
}